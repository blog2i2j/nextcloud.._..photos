{"version":3,"file":"folders-D4009oow.chunk.mjs","sources":["../src/components/Settings/PhotosFolder.vue","../src/store/folders.ts","../src/components/FolderTagPreview.vue","../src/components/Folder.vue","../src/views/Folders.vue"],"sourcesContent":["<!--\n - SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n\n<template>\n\t<div class=\"folder\">\n\t\t<component :is=\"rootFolderIcon\" v-if=\"path === '/'\" />\n\t\t<Folder v-else />\n\t\t<span class=\"folder__info\">\n\t\t\t<div class=\"folder__path\">{{ folderName }}</div>\n\t\t\t<div v-if=\"subname !== ''\">\n\t\t\t\t{{ subname }}\n\t\t\t</div>\n\t\t</span>\n\t\t<NcButton v-if=\"canDelete\"\n\t\t\ttype=\"tertiary\"\n\t\t\t:aria-label=\"t('photos', 'Delete source directory')\"\n\t\t\t@click=\"emitRemoveSourceFolder\">\n\t\t\t<template #icon>\n\t\t\t\t<Close :size=\"20\" />\n\t\t\t</template>\n\t\t</NcButton>\n\t</div>\n</template>\n\n<script lang='ts'>\nimport { defineComponent } from 'vue'\n\nimport Folder from 'vue-material-design-icons/Folder.vue'\nimport Close from 'vue-material-design-icons/Close.vue'\n\nimport { NcButton } from '@nextcloud/vue'\nimport { translate as t } from '@nextcloud/l10n'\n\nexport default defineComponent({\n\tname: 'PhotosFolder',\n\n\tcomponents: {\n\t\tNcButton,\n\t\tFolder,\n\t\tClose,\n\t},\n\n\tprops: {\n\t\tpath: {\n\t\t\ttype: String,\n\t\t\trequired: true,\n\t\t},\n\t\tcanDelete: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t\trootFolderLabel: {\n\t\t\ttype: String,\n\t\t\trequired: true,\n\t\t},\n\t\trootFolderIcon: {\n\t\t\ttype: Object,\n\t\t\trequired: true,\n\t\t},\n\t},\n\n\temits: ['remove-folder'],\n\n\tcomputed: {\n\t\tfolderName() {\n\t\t\tif (this.path === '/') {\n\t\t\t\treturn this.rootFolderLabel\n\t\t\t} else {\n\t\t\t\treturn this.path.split('/').pop()\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Return the summary path of the folder\n\t\t * Examples:\n\t\t *  - /        ==> Home\n\t\t *  - /a       ==> nothing\n\t\t *  - /a/b     ==> /a\n\t\t *  - /a/b/c   ==> /a/b\n\t\t *  - /a/b/c/d ==> /a/b\n\t\t */\n\t\tsubname() {\n\t\t\tconst slashesCount = (this.path.match(/\\//g) ?? []).length\n\n\t\t\tswitch (slashesCount) {\n\t\t\tcase 1:\n\t\t\t\treturn ''\n\t\t\tcase 2:\n\t\t\t\treturn this.path.split('/').splice(0, 2).join('/')\n\t\t\tdefault:\n\t\t\t\treturn this.path.split('/').splice(0, 3).join('/')\n\t\t\t}\n\t\t},\n\t},\n\n\tmethods: {\n\t\temitRemoveSourceFolder() {\n\t\t\tthis.$emit('remove-folder')\n\t\t},\n\n\t\tt,\n\t},\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.folder {\n\tdisplay: flex;\n\tgap: 16px;\n\tmin-width: 300px;\n\n\t&__info {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tflex-grow: 1;\n\t\tjustify-content: center;\n\t}\n\n\t&__path {\n\t\tfont-weight: bold;\n\t}\n}\n</style>\n","/**\n * SPDX-FileCopyrightText: 2019 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nimport Vue from 'vue'\nimport { sortCompare, type PhotoNode } from '../utils/fileUtils.js'\n\nconst state = {\n\tpaths: {},\n\tfolders: {},\n}\n\ntype FoldersState = typeof state\n\nconst mutations = {\n\t/**\n\t * Index folders paths and ids\n\t */\n\tupdateFolders(state: FoldersState, { fileid, files }: { fileid: number, files: PhotoNode[] }) {\n\t\tif (files.length > 0) {\n\t\t\t// sort by last modified\n\t\t\tconst list = files\n\t\t\t\t.sort((a, b) => sortCompare(a, b, 'lastmod'))\n\t\t\t\t.filter(file => file.fileid >= 0)\n\n\t\t\t// Set folder list\n\t\t\tVue.set(state.folders, fileid, list.map(file => file.fileid))\n\t\t} else {\n\t\t\tVue.set(state.folders, fileid, [])\n\t\t}\n\t},\n\n\t/**\n\t * Index folders paths and ids\n\t */\n\taddPath(state: FoldersState, { path, fileid }: { path: string, fileid: number }) {\n\t\tif (fileid >= 0) {\n\t\t\tVue.set(state.paths, path, fileid)\n\t\t}\n\t},\n\n\t/**\n\t * Append files to a folder\n\t */\n\taddFilesToFolder(state: FoldersState, { fileid, files }: { fileid: number, files: PhotoNode[] }) {\n\t\tif (fileid >= 0 && files.length > 0) {\n\t\t\t// and sort by last modified\n\t\t\tconst list = files\n\t\t\t\t.sort((a, b) => sortCompare(a, b, 'lastmod'))\n\t\t\t\t.filter(file => file.fileid >= 0)\n\t\t\t\t.map(file => file.fileid)\n\t\t\tVue.set(state.folders, fileid, [...list, ...state.folders[fileid]])\n\t\t}\n\t},\n}\n\nconst getters = {\n\tfolders: (state: FoldersState) => state.folders,\n\tfolder: (state: FoldersState) => fileid => state.folders[fileid],\n\tfolderId: (state: FoldersState) => path => state.paths[path],\n}\n\nconst actions = {\n\t/**\n\t * Update files and folders\n\t */\n\tupdateFolders(context, { fileid, files, folders }: { fileid: string, files: PhotoNode[], folders: PhotoNode[] }) {\n\t\tcontext.commit('updateFolders', { fileid, files })\n\n\t\t// then add each folders path indexes\n\t\tfolders.forEach(folder => context.commit('addPath', { path: folder.filename, fileid: folder.fileid }))\n\t},\n\n\t/**\n\t * Index folders paths and ids\n\t */\n\taddPath(context, { path, fileid }: { path: string, fileid: string }) {\n\t\tcontext.commit('addPath', { path, fileid })\n\t},\n\n\t/**\n\t * Append files to a folder\n\t */\n\taddFilesToFolder(context, { fileid, files }: { fileid: string, files: PhotoNode[] }) {\n\t\tcontext.commit('addFilesToFolder', { fileid, files })\n\t},\n}\n\nexport default { state, mutations, getters, actions }\n","<!--\n - SPDX-FileCopyrightText: 2019 Nextcloud GmbH and Nextcloud contributors\n - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n\n<template>\n\t<router-link class=\"folder\"\n\t\t:to=\"toLink\"\n\t\t:aria-label=\"ariaLabel\">\n\t\t<img v-if=\"previewUrl\"\n\t\t\tclass=\"folder__image\"\n\t\t\t:src=\"previewUrl\"\n\t\t\talt=\"\"\n\t\t\t@error=\"onPreviewFail(file)\">\n\n\t\t<span v-else class=\"folder__image folder__image--placeholder\">\n\t\t\t<Folder class=\"folder__icon\"\n\t\t\t\t:size=\"96\"\n\t\t\t\tfill-color=\"var(--color-primary-element)\" />\n\t\t</span>\n\n\t\t<span class=\"folder__details\">\n\t\t\t<Folder />\n\t\t\t<span class=\"folder__title\">{{ name }}</span>\n\t\t</span>\n\t</router-link>\n</template>\n\n<script lang='ts'>\nimport { generateUrl } from '@nextcloud/router'\nimport { getCurrentUser } from '@nextcloud/auth'\n\nimport Folder from 'vue-material-design-icons/Folder.vue'\n\nexport default {\n\tname: 'FolderTagPreview',\n\n\tcomponents: {\n\t\tFolder,\n\t},\n\n\tprops: {\n\t\ticon: {\n\t\t\ttype: String,\n\t\t\tdefault: 'icon-folder',\n\t\t},\n\t\tid: {\n\t\t\ttype: [Number, String],\n\t\t\trequired: true,\n\t\t},\n\t\tname: {\n\t\t\ttype: String,\n\t\t\trequired: true,\n\t\t},\n\t\tpath: {\n\t\t\ttype: String,\n\t\t\tdefault: '',\n\t\t},\n\t\tfileList: {\n\t\t\ttype: Array,\n\t\t\tdefault: () => [],\n\t\t},\n\t\tto: {\n\t\t\ttype: Object,\n\t\t\tdefault: null,\n\t\t},\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\tfailed: [],\n\t\t}\n\t},\n\n\tcomputed: {\n\t\t// folder is empty\n\t\tisEmpty() {\n\t\t\treturn this.previewList.length === 0\n\t\t},\n\n\t\tariaLabel() {\n\t\t\treturn t('photos', 'Open the \"{name}\" folder', { name: this.name })\n\t\t},\n\n\t\t/**\n\t\t * Previews list without the failed ones\n\t\t *\n\t\t * @return {object[]} the previews fileinfo\n\t\t */\n\t\tpreviewList() {\n\t\t\treturn this.fileList\n\t\t\t\t.filter(file => this.failed.indexOf(file.fileid) === -1)\n\t\t},\n\n\t\tpreviewUrl() {\n\t\t\tif (this.previewList.length === 0) {\n\t\t\t\treturn null\n\t\t\t}\n\t\t\tconst { fileid, etag } = this.previewList.at(-1)\n\t\t\t// use etag to force cache reload if file changed\n\t\t\treturn generateUrl(`/core/preview?fileId=${fileid}&c=${etag}&x=${250}&y=${250}&forceIcon=0&a=0`)\n\t\t},\n\n\t\t/**\n\t\t * We do not want encoded slashes when browsing by folder\n\t\t * so we generate a new valid route object based on the\n\t\t * current named route, get the final url back, decode it\n\t\t * and use it as a direct string.\n\t\t * Which vue-router does not encode afterwards!\n\t\t *\n\t\t * @return {string}\n\t\t */\n\t\ttoLink() {\n\t\t\tif (this.to) {\n\t\t\t\treturn this.to\n\t\t\t}\n\n\t\t\t// Remove leading /file/{userId}\n\t\t\tconst prefix = `/files/${getCurrentUser()?.uid}`\n\t\t\tlet path = this.path.replace(new RegExp(`^${prefix}`), '')\n\n\t\t\t// always remove first slash, the router\n\t\t\t// manage it automatically\n\t\t\tconst regex = /^\\/?(.+)/i\n\t\t\tpath = regex.exec(path)[1]\n\n\t\t\t// apply to current route\n\t\t\treturn Object.assign({}, this.$route, {\n\t\t\t\tparams: { path: path.split('/') },\n\t\t\t})\n\t\t},\n\t},\n\n\tmethods: {\n\t\tonPreviewFail({ fileid }) {\n\t\t\tthis.failed.push(fileid)\n\t\t},\n\t},\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.folder {\n\tdisplay: flex;\n\tflex-direction: column;\n\tpadding: 16px;\n\tborder-radius: var(--border-radius-large);\n\n\t&:hover,\n\t&:focus {\n\t\tbackground-color: var(--color-background-dark);\n\t}\n\n\t&__image {\n\t\twidth: 200px;\n\t\theight: 200px;\n\t\tobject-fit: cover;\n\t\tborder-radius: var(--border-radius-large);\n\n\t\t&--placeholder {\n\t\t\tbackground-color: var(--color-primary-element-light);\n\t\t}\n\t}\n\n\t&__icon {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}\n\n\t&__details {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 12px;\n\t\tmargin-top: 16px;\n\t\twidth: 200px;\n\t}\n\n\t&__title {\n\t\toverflow: hidden;\n\t\twhite-space: nowrap;\n\t\ttext-overflow: ellipsis;\n\t\tfont-size: 20px;\n\t\tmargin-bottom: 2px;\n\t\tline-height: 30px;\n\t\tcolor: var(--color-main-text);\n\t}\n}\n</style>\n","<!--\n - SPDX-FileCopyrightText: 2019 Nextcloud GmbH and Nextcloud contributors\n - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n\n<template>\n\t<FolderTagPreview :id=\"item.injected.fileid\"\n\t\t:name=\"item.injected.basename.toString()\"\n\t\t:path=\"item.injected.filename\"\n\t\t:file-list=\"previewFiles\" />\n</template>\n\n<script lang='ts'>\nimport { mapGetters } from 'vuex'\n\nimport { getCurrentUser } from '@nextcloud/auth'\n\nimport FolderTagPreview from './FolderTagPreview.vue'\nimport getAlbumContent from '../services/AlbumContent.js'\nimport AbortControllerMixin from '../mixins/AbortControllerMixin.js'\nimport logger from '../services/logger'\n\nexport default {\n\tname: 'Folder',\n\n\tcomponents: {\n\t\tFolderTagPreview,\n\t},\n\n\tmixins: [\n\t\tAbortControllerMixin,\n\t],\n\tinheritAttrs: false,\n\n\tprops: {\n\t\titem: {\n\t\t\ttype: Object,\n\t\t\trequired: true,\n\t\t},\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\tpreviewFolder: this.item.injected.fileid,\n\t\t}\n\t},\n\n\tcomputed: {\n\t\t// global lists\n\t\t...mapGetters([\n\t\t\t'files',\n\t\t\t'folders',\n\t\t]),\n\n\t\t// files list of the current folder\n\t\tfolderContent() {\n\t\t\treturn this.folders[this.item.injected.fileid]\n\t\t},\n\t\tpreviewFiles() {\n\t\t\tconst previewFolderContent = this.folders[this.previewFolder]\n\n\t\t\tconst previewFiles = previewFolderContent\n\t\t\t\t? previewFolderContent\n\t\t\t\t\t.map(id => this.files[id])\n\t\t\t\t\t.slice(0, 4) // only get the 4 first images\n\t\t\t\t: []\n\n\t\t\t// If we didn't found any previews in the folder we try the next subfolder\n\t\t\t// We limit to one subfolder for performance concerns\n\t\t\tif (previewFiles.length === 0\n\t\t\t\t&& this.files[this.previewFolder].folders\n\t\t\t\t&& this.previewFolder === this.item.injected.fileid) {\n\n\t\t\t\tconst firstChildFolder = this.files[this.previewFolder].folders[0]\n\t\t\t\tthis.updatePreviewFolder(firstChildFolder)\n\n\t\t\t\tif (!this.folders[this.previewFolder]) {\n\t\t\t\t\tthis.getFolderData(this.files[this.previewFolder].filename)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn previewFiles\n\t\t},\n\t},\n\n\tasync created() {\n\t\tif (!this.folderContent) {\n\t\t\tawait this.getFolderData(this.item.injected.filename)\n\t\t}\n\t},\n\n\tmethods: {\n\t\tasync getFolderData(filename) {\n\t\t\ttry {\n\t\t\t\t// Remove leading /file/{userId}\n\t\t\t\tconst prefix = `/files/${getCurrentUser()?.uid}`\n\t\t\t\tconst unPrefixedFileName = filename.replace(new RegExp(`^${prefix}`), '')\n\n\t\t\t\t// get data\n\t\t\t\tconst { folder, folders, files } = await getAlbumContent(unPrefixedFileName, {\n\t\t\t\t\tshared: this.item.injected.showShared,\n\t\t\t\t\tsignal: this.abortController.signal,\n\t\t\t\t})\n\t\t\t\tthis.$store.dispatch('updateFolders', { fileid: folder.fileid, files, folders })\n\t\t\t\tthis.$store.dispatch('updateFiles', { folder, files, folders })\n\t\t\t} catch (error) {\n\t\t\t\tif (error.response && error.response.status) {\n\t\t\t\t\tlogger.error('Failed to get folder content', { error, filename })\n\t\t\t\t} else {\n\t\t\t\t\tlogger.debug(error)\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tupdatePreviewFolder(path) {\n\t\t\tthis.previewFolder = path\n\t\t},\n\t},\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@use '../mixins/FileFolder';\n\n.folder-content {\n\tposition: absolute;\n\tdisplay: grid;\n\twidth: 100%;\n\theight: 100%;\n\t// folder layout if less than 4 pictures\n\t&--grid-1 {\n\t\tgrid-template-columns: 1fr;\n\t\tgrid-template-rows: 1fr;\n\t}\n\t&--grid-2 {\n\t\tgrid-template-columns: 1fr;\n\t\tgrid-template-rows: 1fr 1fr;\n\t}\n\t&--grid-3 {\n\t\tgrid-template-columns: 1fr 1fr;\n\t\tgrid-template-rows: 1fr 1fr;\n\t\timg:first-child {\n\t\t\tgrid-column: span 2;\n\t\t}\n\t}\n\t&--grid-4 {\n\t\tgrid-template-columns: 1fr 1fr;\n\t\tgrid-template-rows: 1fr 1fr;\n\t}\n\timg {\n\t\twidth: 100%;\n\t\theight: 100%;\n\n\t\tobject-fit: cover;\n\t}\n}\n\n$name-height: 1rem;\n\n.folder-name {\n\tposition: absolute;\n\tz-index: 3;\n\tdisplay: flex;\n\toverflow: hidden;\n\tflex-direction: column;\n\twidth: 100%;\n\theight: 100%;\n\ttransition: opacity var(--animation-quick) ease-in-out;\n\topacity: 1;\n\t&__icon {\n\t\theight: 40%;\n\t\tmargin-top: calc(30% - #{$name-height} / 2); // center name+icon\n\t\tbackground-size: 40%;\n\t}\n\t&__name {\n\t\toverflow: hidden;\n\t\theight: $name-height;\n\t\tpadding: 0 10px;\n\t\ttext-align: center;\n\t\twhite-space: nowrap;\n\t\ttext-overflow: ellipsis;\n\t\tcolor: var(--color-main-background);\n\t\ttext-shadow: 0 0 8px var(--color-main-text);\n\t\tfont-size: $name-height;\n\t\tline-height: $name-height;\n\t}\n}\n\n// Cover management empty/full\n.folder {\n\t// if no img, let's display the folder icon as default black\n\t&--clear {\n\t\t.folder-name__icon {\n\t\t\topacity: .3;\n\t\t}\n\t\t.folder-name__name {\n\t\t\tcolor: var(--color-main-text);\n\t\t\ttext-shadow: 0 0 8px var(--color-main-background);\n\t\t}\n\t}\n\n\t// show the cover as background\n\t// if  there are pictures in it\n\t// so we can sho the folder+name above it\n\t&:not(.folder--clear) {\n\t\t.cover {\n\t\t\topacity: .3;\n\t\t}\n\n\t\t// hide everything but pictures\n\t\t// on hover/active/focus\n\t\t&.active,\n\t\t&:active,\n\t\t&:hover,\n\t\t&:focus {\n\t\t\t.folder-name,\n\t\t\t.cover {\n\t\t\t\topacity: 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\n</style>\n","<!--\n  - SPDX-FileCopyrightText: 2019 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n\n<template>\n\t<!-- Errors handlers-->\n\t<NcEmptyContent v-if=\"error === 404\" :name=\"t('photos', 'This folder does not exist')\">\n\t\t<template #icon>\n\t\t\t<FolderIcon />\n\t\t</template>\n\t</NcEmptyContent>\n\t<NcEmptyContent v-else-if=\"error\" :name=\"t('photos', 'An error occurred')\" />\n\t<NcEmptyContent v-else-if=\"initializing\" :name=\"t('photos', 'Loading folders …')\">\n\t\t<template #icon>\n\t\t\t<NcLoadingIcon />\n\t\t</template>\n\t</NcEmptyContent>\n\n\t<!-- Folder content -->\n\t<div v-else-if=\"!initializing\">\n\t\t<HeaderNavigation key=\"navigation\"\n\t\t\t:class=\"{'photos-navigation--uploading': uploader.queue?.length > 0}\"\n\t\t\t:loading=\"loading\"\n\t\t\t:path=\"path\"\n\t\t\t:title=\"folder?.basename?.toString?.() || rootTitle\"\n\t\t\t:root-title=\"rootTitle\"\n\t\t\t@refresh=\"onRefresh\">\n\t\t\t<UploadPicker :accept=\"allowedMimes\"\n\t\t\t\t:destination=\"folderAsFolder\"\n\t\t\t\t:multiple=\"true\"\n\t\t\t\t@uploaded=\"onUpload\" />\n\t\t</HeaderNavigation>\n\n\t\t<!-- Empty folder, should only happen via direct link -->\n\t\t<NcEmptyContent v-if=\"isEmpty\" key=\"emptycontent\" :name=\"t('photos', 'No photos in here')\">\n\t\t\t<template #icon>\n\t\t\t\t<FolderIcon />\n\t\t\t</template>\n\t\t</NcEmptyContent>\n\n\t\t<div v-else\n\t\t\tclass=\"grid-container\"\n\t\t\t:class=\"{\n\t\t\t\t'grid-container--folders': haveFolders,\n\t\t\t}\">\n\t\t\t<VirtualGrid ref=\"virtualgrid\"\n\t\t\t\t:items=\"contentList\"\n\t\t\t\t:scroll-element=\"appContent\"\n\t\t\t\t:get-column-count=\"() => haveFolders ? gridConfig.folderCount : gridConfig.count\"\n\t\t\t\t:get-grid-gap=\"() => haveFolders ? 16 : 8\" />\n\t\t</div>\n\t</div>\n</template>\n\n<script lang='ts'>\nimport { mapGetters } from 'vuex'\nimport { NcEmptyContent, NcLoadingIcon } from '@nextcloud/vue'\nimport { Upload, UploadPicker, getUploader } from '@nextcloud/upload'\nimport { Folder as NcFolder, davRootPath, davParsePermissions } from '@nextcloud/files'\nimport FolderIcon from 'vue-material-design-icons/Folder.vue'\nimport VirtualGrid from 'vue-virtual-grid'\n\nimport FileLegacy from '../components/FileLegacy.vue'\nimport Folder from '../components/Folder.vue'\nimport HeaderNavigation from '../components/HeaderNavigation.vue'\n\nimport allowedMimes from '../services/AllowedMimes.js'\nimport getAlbumContent from '../services/AlbumContent.js'\n\nimport AbortControllerMixin from '../mixins/AbortControllerMixin.js'\nimport GridConfigMixin from '../mixins/GridConfig.js'\nimport { fetchFile } from '../services/fileFetcher'\nimport logger from '../services/logger'\n\nexport default {\n\tname: 'Folders',\n\tcomponents: {\n\t\tFolderIcon,\n\t\tHeaderNavigation,\n\t\tNcEmptyContent,\n\t\tNcLoadingIcon,\n\t\tUploadPicker,\n\t\tVirtualGrid,\n\t},\n\tmixins: [\n\t\tAbortControllerMixin,\n\t\tGridConfigMixin,\n\t],\n\tprops: {\n\t\trootTitle: {\n\t\t\ttype: String,\n\t\t\trequired: true,\n\t\t},\n\t\tpath: {\n\t\t\ttype: String,\n\t\t\tdefault: '/',\n\t\t},\n\t\tshowShared: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\terror: null,\n\t\t\tallowedMimes,\n\n\t\t\tinitializing: true,\n\t\t\tloading: false,\n\n\t\t\tappContent: document.getElementById('app-content-vue'),\n\n\t\t\tuploader: getUploader(),\n\t\t}\n\t},\n\n\tcomputed: {\n\t\t// global lists\n\t\t...mapGetters([\n\t\t\t'files',\n\t\t\t'folders',\n\t\t]),\n\n\t\t// current folder id from current path\n\t\tfolderId() {\n\t\t\treturn this.$store.getters.folderId(this.path)\n\t\t},\n\n\t\t// files list of the current folder\n\t\tfolder() {\n\t\t\treturn this.files[this.folderId]\n\t\t},\n\t\tfolderAsFolder() {\n\t\t\tif (!this.folder) {\n\t\t\t\treturn null\n\t\t\t}\n\n\t\t\treturn new NcFolder({\n\t\t\t\t...this.folder,\n\t\t\t\tsource: decodeURI(this.folder.source),\n\t\t\t\tpermissions: davParsePermissions(this.folder.permissions),\n\t\t\t})\n\t\t},\n\t\tfolderContent() {\n\t\t\treturn this.folders[this.folderId] || []\n\t\t},\n\t\tfileList() {\n\t\t\tconst list = this.folderContent\n\t\t\t\t&& this.folderContent\n\t\t\t\t\t.map(id => this.files[id])\n\t\t\t\t\t.filter(file => !!file)\n\t\t\treturn list\n\t\t},\n\n\t\t// subfolders of the current folder\n\t\tsubFolders() {\n\t\t\treturn this.folderId\n\t\t\t\t&& this.files[this.folderId]\n\t\t\t\t&& this.files[this.folderId].folders\n\t\t},\n\t\tfolderList() {\n\t\t\tconst list = this.subFolders\n\t\t\t\t&& this.subFolders\n\t\t\t\t\t.map(id => this.files[id])\n\t\t\t\t\t.filter(file => !!file)\n\t\t\treturn list\n\t\t},\n\t\tcontentList() {\n\t\t\tconst folders = this.folderList?.map((folder) => {\n\t\t\t\treturn {\n\t\t\t\t\tid: `folder-${folder.fileid}`,\n\t\t\t\t\tinjected: {\n\t\t\t\t\t\t...folder,\n\t\t\t\t\t\tshowShared: this.showShared,\n\t\t\t\t\t},\n\t\t\t\t\twidth: 232,\n\t\t\t\t\theight: 280,\n\t\t\t\t\tcolumnSpan: 1,\n\t\t\t\t\trenderComponent: Folder,\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tconst files = this.fileList?.map((file) => {\n\t\t\t\treturn {\n\t\t\t\t\tid: `file-${file.fileid}`,\n\t\t\t\t\tinjected: {\n\t\t\t\t\t\t...file,\n\t\t\t\t\t\tlist: this.fileList,\n\t\t\t\t\t},\n\t\t\t\t\twidth: 256,\n\t\t\t\t\theight: 256,\n\t\t\t\t\tcolumnSpan: 1,\n\t\t\t\t\trenderComponent: FileLegacy,\n\t\t\t\t}\n\t\t\t})\n\n\t\t\treturn [...(folders || []), ...(files || [])]\n\t\t},\n\n\t\t// is current folder empty?\n\t\tisEmpty() {\n\t\t\treturn !this.haveFiles && !this.haveFolders\n\t\t},\n\t\thaveFiles() {\n\t\t\treturn !!this.fileList && this.fileList.length !== 0\n\t\t},\n\t\thaveFolders() {\n\t\t\treturn !!this.folderList && this.folderList.length !== 0\n\t\t},\n\t},\n\n\twatch: {\n\t\tpath() {\n\t\t\tthis.fetchFolderContent()\n\t\t},\n\t\tshowShared() {\n\t\t\tthis.fetchFolderContent()\n\t\t},\n\t},\n\n\tbeforeMount() {\n\t\tthis.fetchFolderContent()\n\t},\n\n\tmethods: {\n\t\tonRefresh() {\n\t\t\tthis.fetchFolderContent()\n\t\t},\n\n\t\tasync fetchFolderContent() {\n\t\t\tthis.error = null\n\t\t\tthis.loading = true\n\n\t\t\t// close any potential opened viewer & sidebar\n\t\t\tOCA?.Viewer?.close?.()\n\t\t\tOCA?.Files?.Sidebar?.close?.()\n\n\t\t\t// if we don't already have some cached data let's show a loader\n\t\t\tif (!this.files[this.folderId] || !this.folders[this.folderId]) {\n\t\t\t\tthis.initializing = true\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t// get content and current folder info\n\t\t\t\tconst { folder, folders, files } = await getAlbumContent(this.path, {\n\t\t\t\t\tshared: this.showShared,\n\t\t\t\t\tsignal: this.abortController.signal,\n\t\t\t\t})\n\t\t\t\tthis.$store.dispatch('addPath', { path: this.path, fileid: folder.fileid })\n\t\t\t\tthis.$store.dispatch('updateFolders', { fileid: folder.fileid, files, folders })\n\t\t\t\tthis.$store.dispatch('updateFiles', { folder, files, folders })\n\t\t\t} catch (error) {\n\t\t\t\tif (error.response && error.response.status) {\n\t\t\t\t\tif (error.response.status === 404) {\n\t\t\t\t\t\tthis.error = 404\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tthis.$router.push({ name: this.$route.name })\n\t\t\t\t\t\t}, 3000)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.error = error\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// cancelled request, moving on...\n\t\t\t\tlogger.error('Error fetching album data', { error })\n\t\t\t} finally {\n\t\t\t\t// done loading even with errors\n\t\t\t\tthis.loading = false\n\t\t\t\tthis.initializing = false\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Fetch file Info and add them into the store\n\t\t *\n\t\t * @param {Upload} upload the newly uploaded files\n\t\t */\n\t\tasync onUpload(upload) {\n\t\t\tconst relPath = upload.source.split(davRootPath).pop()\n\t\t\tconst file = await fetchFile(relPath)\n\t\t\tthis.$store.dispatch('appendFiles', [file])\n\t\t\tthis.$store.dispatch('addFilesToFolder', { fileid: this.folderId, files: [file] })\n\t\t},\n\t},\n\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@use 'sass:map';\n\n@mixin grid-sizes() {\n\t$previous: 0;\n\n\t@each $size, $config in $sizes {\n\t\t$count: map.get($config, 'count');\n\t\t$marginTop: map.get($config, 'marginTop');\n\t\t$marginW: map.get($config, 'marginW');\n\n\t\t@if $size == 'max' {\n\t\t\t@media (min-width: #{$previous}px) {\n\t\t\t\t@content($marginTop, $marginW);\n\t\t\t}\n\t\t}\n\n\t\t@else {\n\t\t\t@media (min-width: #{$previous}px) and (max-width: #{$size}px) {\n\t\t\t\t@content($marginTop, $marginW);\n\t\t\t}\n\t\t}\n\n\t\t$previous: $size;\n\t}\n}\n\n.grid-container {\n\t@include grid-sizes using ($marginTop, $marginW) {\n\t\tpadding: 0px #{$marginW}px 256px #{$marginW}px;\n\t}\n\n\t&--folders {\n\t\tpadding: 32px 48px;\n\n\t\t@media only screen and (max-width: 400px) {\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: center;\n\t\t\twidth: 100%;\n\t\t}\n\n\t\t@media only screen and (min-width: 400px) {\n\t\t\twidth: fit-content;\n\t\t}\n\t}\n}\n\n.photos-navigation {\n\tposition: relative;\n\n\t// Add space at the bottom for the progress bar.\n\t&--uploading {\n\t\tmargin-bottom: 30px;\n\t}\n\n\t:deep(.upload-picker) {\n\t\t.upload-picker__progress {\n\t\t\tposition: absolute;\n\t\t\tbottom: -30px;\n\t\t\tleft: 64px;\n\t\t\tmargin: 0;\n\t\t}\n\n\t\t.upload-picker__cancel {\n\t\t\tposition: absolute;\n\t\t\tbottom: -24px;\n\t\t\tright: 50px;\n\t\t}\n\t}\n}\n</style>\n"],"names":["_sfc_main$3","defineComponent","NcButton","Folder","Close","t","state","mutations","fileid","files","list","a","b","sortCompare","file","Vue","path","getters","actions","context","folders","folder","_sfc_main$2","etag","generateUrl","prefix","getCurrentUser","_sfc_main$1","FolderTagPreview","AbortControllerMixin","mapGetters","previewFolderContent","previewFiles","id","firstChildFolder","filename","unPrefixedFileName","getAlbumContent","error","logger","_sfc_main","FolderIcon","HeaderNavigation","NcEmptyContent","NcLoadingIcon","UploadPicker","VirtualGrid","GridConfigMixin","allowedMimes","getUploader","NcFolder","davParsePermissions","FileLegacy","upload","relPath","davRootPath","fetchFile"],"mappings":"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"}